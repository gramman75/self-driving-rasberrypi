.. picamera_quick

===============
Picamera 사용법
===============

Python에서 picamera를 control하기 위해서는 picamera module이 설치가 되어 있어야 합니다. 기본적으로 rasbien을 사용하고 있으면 설치가 되어 있습니다.
다른 OS를 설치를 했다면 아래와 같이 입력하여 설치를 해야 합니다.::

    sudo pip install picamera

아래는 10초간 camera를 통한 영상을 보여주는 예제입니다.

.. code-block:: python

    import time
    import picamera

    camera = picamera.PiCamera()
    try:
        camera.start_preview()
        time.sleep(10)
        camera.stop_preview()
    finally:
        camera.close()

위 예제에서 중요한 부분은 camera를 사용하면 꼭 ``camera.close()`` 를 수행하여 resouce를 반납해야 합니다.
아래 예제는 python은 ``with/as`` 문을 이용하여 close를 암묵적으로 처리하는 예제입니다.

.. code-block:: python

    import time
    import picamera

    with picamera.PiCamera() as camera:
        camera.start_preview()
        time.sleep(10)
        camera.stop_preview()

``with/as`` 는 python에서 context를 관리하는 용도로 사용이 됩니다. 특정 class를 사용하고 종료가 되면 자동으로 지정된 함수가 수행이 됩니다.
예를 들면 file을 open한 후에 close를 해야 하는 경우, lock을 잡고 task가 끝나면 unlock을 해야하는 것을 예로 들 수 있습니다.

try/finally와 유사하지만 간단하게 표현되는 장점이 있습니다. 물론 with/as가 지원이 되도록 해당 class를 구현해야 합니다.

다음은 동영상 녹화 입니다. 아래는 640x480 해상도로 h264 format으로 60초간 녹화를 하는 예제입니다.

.. code-block:: python

    import picamera

    with picamera.PiCamera() as camera:
        camera.resolution = (640, 480)
        camera.start_preview()
        camera.start_recording('foo.h264')
        camera.wait_recording(60)
        camera.stop_recording()
        camera.stop_preview()


녹화하는 동안 대기하기 위해서 ``sleep`` 를 사용하지 않고 ``wait_recording`` 을 사용했습니다. 차이점은 ``wait_recording`` 을 사용하면
녹화 도중 에러가 발생하면 바로 종료가 되지만, ``sleep`` 는 에러가 발생해도 해당 시간동안 대기하는 차이가 있습니다.

 .. note:: ``h264`` format을 ``mp4`` 로 encoding하려면 아래 프로그램을 설치합니다.::

    sudo apt-get install gpac

    설치 후 아래와 같이 입력하여 encoding 합니다.::

    MP4Box -add filename.h264 filename.mp4


picamera는 사진 촬영시 여러가지 속성을 지정할 수 있습니다. 해상도, 밝기, 노출, 효과, 이미지의 Meta Tag도 설정할 수 있습니다.

.. code-block:: python

    import time
    import picamera

    with picamera.PiCamera() as camera:
        camera.resolution = (1280, 720) # 해상도
        camera.start_preview()
        camera.exposure_compensation = 20 # 노출 정도
        camera.exposure_mode = 'spotlight' # 노출 모드
        camera.meter_mode = 'matrix'
        camera.image_effect = 'gpen' # Image 효과. Pen
        camera.exif_tags['IFD0.Artist'] = 'Gramman'
        camera.exif_tags['IFD0.Copyright'] = 'Gramman'

        time.sleep(2)
        camera.capture('foo1.jpg')
        camera.stop_preview()

각 속성에 대한 자세한 내용은 `exif_tags <https://picamera.readthedocs.io/en/release-1.10/api_camera.html#picamera.camera.PiCamera.exif_tags>`_ 를 참고하시기 바랍니다.

